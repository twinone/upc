<<
/* parser.dlg -- DLG Description of scanner
 *
 * Generated from: lego.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-2001
 * Purdue University Electrical Engineering
 * With AHPCRC, University of Minnesota
 * ANTLR Version 1.33MR33
 */

#define ANTLR_VERSION	13333
#include "pcctscfg.h"
#include "pccts_stdio.h"

#include <string>
#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
#include <iomanip>


// Uncomment for debugging lines
//#define DEBUG
#ifdef DEBUG
#define D(x) x
#else
#define D(x)
#endif

// Uncomment for user-warnings (wrongly placed blocks, out of bounds, etc)
//#define WARN
#ifdef WARN
#define W(x) x
#else
#define W(x)
#endif


using namespace std;

// struct to store information about tokens
typedef struct {
  string kind;
  string text;
  int type;
} Attrib;

// function to fill token information (predeclaration)
void zzcr_attr(Attrib *attr, int type, char *text);

// fields for AST nodes
#define AST_FIELDS string kind; string text; int type;
#include "ast.h"

// macro to create a new AST node (and function predeclaration)
#define zzcr_ast(as,attr,ttype,textt) as=createASTnode(attr,ttype,textt)
AST* createASTnode(Attrib* attr,int ttype, char *textt);
#include "antlr.h"
#include "ast.h"
#include "tokens.h"
#include "dlgdef.h"
LOOKAHEAD

void
#ifdef __USE_PROTOS
zzerraction(void)
#else
zzerraction()
#endif
{
	(*zzerr)("invalid token");
	zzadvance();
	zzskip();
}
>>


%%START

@
	<<
		NLA = 1;
	>>

[\ \n\t]
	<<
		NLA = SPACE;
    zzskip();  
	>>

PRINT
	<<
		NLA = PRINT;
	>>

true|false
	<<
		NLA = BOOL;
	>>

AND
	<<
		NLA = AND;
	>>

MOVE
	<<
		NLA = MOVE;
	>>

FITS
	<<
		NLA = FITS;
	>>

HEIGHT
	<<
		NLA = HEIGHT;
	>>

NORTH|EAST|SOUTH|WEST
	<<
		NLA = NESW;
	>>

Grid|GRID
	<<
		NLA = GRID;
	>>

DEF
	<<
		NLA = DEF;
	>>

PLACE
	<<
		NLA = PLACE;
	>>

ENDEF|ENDDEF
	<<
		NLA = ENDEF;
	>>

WHILE
	<<
		NLA = WHILE;
	>>

AT
	<<
		NLA = AT;
	>>

\<|\>|\<\=|\>\=|\=\=|\!\=
	<<
		NLA = CMP;
	>>

\=
	<<
		NLA = ASSIG;
	>>

\(
	<<
		NLA = LPAREN;
	>>

\)
	<<
		NLA = RPAREN;
	>>

\[
	<<
		NLA = LSQUARE;
	>>

\]
	<<
		NLA = RSQUARE;
	>>

\,
	<<
		NLA = COMMA;
	>>

PUSH|POP
	<<
		NLA = PUSH;
	>>

[0-9]+
	<<
		NLA = INT;
	>>

[a-zA-Z][a-zA-Z0-9]*
	<<
		NLA = ID;
	>>

%%
